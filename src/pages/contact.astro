---
import Layout from "../layouts/Layout.astro";
import { generateToken } from "../utils/csrf";

// Constants
const STYLE_CLASS = "bg-transparent p-2 border-2 border-slate-700 focus:outline-none focus:ring-2 focus:ring-customBlue";
const RECIPIENT_EMAIL = "chess.logic@gmail.com";

// Generate CSRF token
let storedCsrfToken = Astro.cookies.get("csrfToken")?.value;
if (!storedCsrfToken) {
    storedCsrfToken = generateToken();
    Astro.cookies.set("csrfToken", storedCsrfToken, {
        httpOnly: true,
        secure: true,
        sameSite: 'strict',
        path: '/'
    });
}
---

<Layout>
    <div class="flex flex-col w-full h-screen items-center justify-center relative">
        <div
            id="email-alert"
            class="fixed bottom-4 right-4 p-4 rounded-lg shadow-lg hidden"
            role="alert"
        >
        </div>

        <h1 class="text-4xl">What can I do for you?</h1>
        <br />
        
        <form 
            id="contact-form" 
            class="flex flex-col w-1/3 p-12 text-xl border border-customBlue border-l-[10px] rounded-lg"
        >
            <input type="hidden" name="csrfToken" value={storedCsrfToken} />
            
            <label for="name">Name</label>
            <input 
                class={STYLE_CLASS} 
                id="name" 
                name="name" 
                type="text" 
                required 
                maxlength="100"
                autocomplete="off"
            />
            <br />
            
            <label for="email">Email</label>
            <input 
                class={STYLE_CLASS} 
                id="email" 
                name="email" 
                type="email" 
                required
                maxlength="254"
                autocomplete="off"
            />
            <br />
            
            <label for="message">Message</label>
            <textarea 
                class={STYLE_CLASS} 
                id="message" 
                name="message" 
                placeholder="Talk to me!"
                required
                maxlength="1000"
                autocomplete="off"
            ></textarea>
            <br />
            
            <button 
                class="bg-customBlue rounded-lg p-2 hover:bg-opacity-50 transition-colors" 
                type="submit"
            >
                Send
            </button>
        </form>
    </div>
</Layout>

<script>
    import { init, send } from '@emailjs/browser';
  
    // Initialize EmailJS
    init(import.meta.env.PUBLIC_EMAILJS_KEY);

    const form = document.getElementById('contact-form') as HTMLFormElement;
    const alertElement = document.getElementById('email-alert');
      
    form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target as HTMLFormElement);
        const csrfToken = formData.get('csrfToken')?.toString();

        try {
            const response = await fetch('/api/validateCsrf', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ csrfToken }),
            });

            if (!response.ok) {
                throw new Error('CSRF validation failed');
            }

            await send(
                import.meta.env.PUBLIC_EMAILJS_SERVICE_ID,
                import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID,
                {
                    fromName: formData.get('name'),
                    fromEmail: formData.get('email'),
                    message: formData.get('message'),
                }
            );
            
            showAlert('success', 'Your message has been sent successfully!');
            form.reset();
        
        } catch (error) {
            showAlert('error', 'There was an error sending your message. Please try again.');
        }
    });

    function showAlert(status: 'success' | 'error', message: string) {
        if (alertElement) {
            alertElement.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg ${
                status === 'success' ? 'bg-green-300 text-green-800' : 'bg-red-300 text-red-800'
            }`;
            alertElement.textContent = message;
            alertElement.classList.remove('hidden');

            setTimeout(() => {
                alertElement.classList.add('hidden');
            }, 5000);
        }
    }
</script>