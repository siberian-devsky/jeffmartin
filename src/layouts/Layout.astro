---
import Menu from "../components/Menu.astro"
import '@fontsource/unifontex';
import "../styles/global.css";

const buildMode = import.meta.env.MODE;
const build = buildMode.toLocaleLowerCase() == "development" ? "[DEV]" : "[PROD]"
---

<!doctype html>
<html lang="en" class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Jeff Martin</title>
	</head>
	<body class="bg-white text-gray-800 dark:bg-[rgb(27,27,27)] dark:text-[rgba(255,255,255,0.608)] transition-colors duration-300">
		<div class="p-5 font-unifontex">
			<Menu/>
			<!-- each slot represents a route/page -->
			<slot />
		</div>
	</body>
</html>

<script>
  // Check for saved theme preference or use dark mode by default
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme") as string;
    }
    return "dark"; // Default to dark mode
  })();
  
  // Apply the theme class on initial load
  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  // Store the theme preference when it changes
  window.localStorage.setItem("theme", theme);

  // Make theme switching function available globally
  window.toggleTheme = () => {
  // Add transitioning class
  document.documentElement.classList.add('transitioning');
  
  // Toggle dark mode
  const isDark = document.documentElement.classList.contains("dark");
  if (isDark) {
    document.documentElement.classList.remove("dark");
    localStorage.setItem("theme", "light");
  } else {
    document.documentElement.classList.add("dark");
    localStorage.setItem("theme", "dark");
  }
  
  // Remove transitioning class after transition completes
  setTimeout(() => {
    document.documentElement.classList.remove('transitioning');
  }, 300); // Match this to your transition-duration
};
</script>